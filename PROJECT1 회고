<프로젝트 후 개선하면 좋을 사항>
사용자에게 메뉴를 보여주고 (회원가입 / 로그인 / 예매 창  )을 선택할수 있게 한 테이블로 실행
관리자 메뉴 (영화관리, 상영시간, 예매정보 ) 한테이블로 실행.

구현 흐름:
1.메인 메뉴 출력 (회원가입, 로그인, 예매 선택)

2.회원가입 선택 → 회원가입 처리

3.로그인 선택 → 로그인 처리

4.예매 선택 → 예매 처리

5.종료 선택 → 프로그램 종료
----------------------------------

package com.movie.main;

import java.util.Scanner;
import com.movie.dao.UserDAO;
import com.movie.dao.ReservationDAO;
import com.movie.dao.ScreeningTimeDAO;
import com.movie.dao.SeatDAO;

public class MovieApp {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        UserDAO userDAO = new UserDAO();
        ReservationDAO reservationDAO = new ReservationDAO();
        ScreeningTimeDAO screeningTimeDAO = new ScreeningTimeDAO();
        SeatDAO seatDAO = new SeatDAO();

        while (true) {
            // 메인 메뉴 출력
            System.out.println("\n===== 영화 예매 시스템 =====");
            System.out.println("1. 회원가입");
            System.out.println("2. 로그인");
            System.out.println("3. 예매");
            System.out.println("4. 종료");
            System.out.print("메뉴를 선택하세요: ");

            int choice = scanner.nextInt();
            scanner.nextLine(); // 버퍼 비우기

            switch (choice) {
                case 1:
                    // 회원가입
                    registerUser(scanner, userDAO);
                    break;

                case 2:
                    // 로그인
                    loginUser(scanner, userDAO);
                    break;

                case 3:
                    // 예매
                    makeReservation(scanner, reservationDAO, screeningTimeDAO, seatDAO);
                    break;

                case 4:
                    // 종료
                    System.out.println("프로그램을 종료합니다.");
                    scanner.close();
                    return;

                default:
                    System.out.println("잘못된 선택입니다. 다시 선택해주세요.");
            }
        }
    }

    // 회원가입
    private static void registerUser(Scanner scanner, UserDAO userDAO) {
        System.out.println("\n===== 회원가입 =====");
        System.out.print("아이디를 입력하세요: ");
        String userId = scanner.nextLine();
        System.out.print("비밀번호를 입력하세요: ");
        String password = scanner.nextLine();

        if (userDAO.registerUser(userId, password)) {
            System.out.println("회원가입이 완료되었습니다.");
        } else {
            System.out.println("회원가입에 실패했습니다.");
        }
    }

    // 로그인
    private static void loginUser(Scanner scanner, UserDAO userDAO) {
        System.out.println("\n===== 로그인 =====");
        System.out.print("아이디를 입력하세요: ");
        String userId = scanner.nextLine();
        System.out.print("비밀번호를 입력하세요: ");
        String password = scanner.nextLine();

        if (userDAO.loginUser(userId, password)) {
            System.out.println("로그인 성공!");
        } else {
            System.out.println("로그인 실패! 아이디 또는 비밀번호가 잘못되었습니다.");
        }
    }

    // 예매
    private static void makeReservation(Scanner scanner, ReservationDAO reservationDAO, ScreeningTimeDAO screeningTimeDAO, SeatDAO seatDAO) {
        System.out.println("\n===== 영화 예매 =====");
        System.out.print("예매자 ID를 입력하세요: ");
        String userId = scanner.nextLine();
        
        // 영화 선택 및 상영 시간 선택
        System.out.print("영화 ID를 입력하세요: ");
        int movieId = scanner.nextInt();
        scanner.nextLine(); // 버퍼 비우기

        // 상영 시간 조회
        List<String> times = screeningTimeDAO.getScreeningTimes(movieId);
        if (times.isEmpty()) {
            System.out.println("선택한 영화의 상영 시간이 없습니다.");
            return;
        }

        // 상영 시간 선택
        System.out.println("상영 시간 선택:");
        for (int i = 0; i < times.size(); i++) {
            System.out.println((i + 1) + ". " + times.get(i));
        }
        System.out.print("상영 시간을 선택하세요: ");
        int timeChoice = scanner.nextInt();
        scanner.nextLine(); // 버퍼 비우기

        if (timeChoice < 1 || timeChoice > times.size()) {
            System.out.println("잘못된 상영 시간 선택입니다.");
            return;
        }

        String selectedTime = times.get(timeChoice - 1);

        // 좌석 선택
        System.out.println("좌석 선택:");
        String selectedSeat = "Seat " + scanner.nextInt(); // 예시로 간단하게 숫자로 좌석 선택
        scanner.nextLine(); // 버퍼 비우기

        // 좌석 예약 확인
        if (seatDAO.isSeatReserved(movieId, selectedTime, selectedSeat)) {
            System.out.println("선택한 좌석은 이미 예약되었습니다.");
            return;
        }

        // 좌석 예약
        if (seatDAO.reserveSeat(movieId, selectedTime, selectedSeat)) {
            int reservationId = reservationDAO.getNextReservationId();
            boolean isReserved = reservationDAO.saveReservation(reservationId, movieId, selectedTime, selectedSeat, userId);
            if (isReserved) {
                System.out.println("예매가 완료되었습니다.");
            } else {
                System.out.println("예매 저장에 실패했습니다.");
            }
        } else {
            System.out.println("좌석 예약에 실패했습니다.");
        }
    }
}

--------------------실행 예시-----------------
===== 영화 예매 시스템 =====
1. 회원가입
2. 로그인
3. 예매
4. 종료
메뉴를 선택하세요: 1

===== 회원가입 =====
아이디를 입력하세요: user123
비밀번호를 입력하세요: password123
회원가입이 완료되었습니다.

===== 영화 예매 시스템 =====
1. 회원가입
2. 로그인
3. 예매
4. 종료
메뉴를 선택하세요: 2

===== 로그인 =====
아이디를 입력하세요: user123
비밀번호를 입력하세요: password123
로그인 성공!

===== 영화 예매 시스템 =====
1. 회원가입
2. 로그인
3. 예매
4. 종료
메뉴를 선택하세요: 3

===== 영화 예매 =====
예매자 ID를 입력하세요: user123
영화 ID를 입력하세요: 1
상영 시간 선택:
1. 2025-05-01 14:00
2. 2025-05-01 17:00
상영 시간을 선택하세요: 1
좌석 선택:
1
예매가 완료되었습니다.



----------------------------
그리고 각 기능별 DAO 만들기
package com.movie.dao;

import java.sql.*;

public class UserDAO {

    private static final String URL = "jdbc:oracle:thin:@192.168.18.12:1521:xe";
    private static final String USER = "MOVIE";
    private static final String PASSWORD = "movie";

    // 회원가입
    public boolean registerUser(String userId, String password) {
        String sql = "INSERT INTO users (user_id, password) VALUES (?, ?)";
        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, userId);
            ps.setString(2, password);
            int rows = ps.executeUpdate();
            return rows > 0; // 성공적으로 삽입되었으면 true 반환
        } catch (SQLException e) {
            System.err.println("회원가입 실패: " + e.getMessage());
            return false;
        }
    }

    // 로그인
    public boolean loginUser(String userId, String password) {
        String sql = "SELECT COUNT(*) FROM users WHERE user_id = ? AND password = ?";
        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, userId);
            ps.setString(2, password);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getInt(1) > 0; // 사용자 존재하면 true 반환
            }
        } catch (SQLException e) {
            System.err.println("로그인 실패: " + e.getMessage());
        }
        return false; // 사용자 없으면 false 반환
    }
}

-------
상영시간, 좌석, 예매 정보저장 DAO 만들기
